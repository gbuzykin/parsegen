// Lexegen autogenerated analyzer file - do not edit!

static int symb2meta[256] = {
    -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 5, 6,
    0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 11, 11, 11,
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 14, 0, 11, 0, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 11, 24, 25, 26, 27, 28, 29, 11, 30, 31, 32, 33, 34, 11, 35, 36, 11, 37, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0
};

static int def[98] = {
    -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1,
    -1, -1, 0, -1, -1, 34, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 83, 83, 83, 83,
    83, 83, 83, 83, 83, 83, 83, 83, 83, 83
};

static int base[98] = {
    0, 39, 78, 80, 79, 91, 91, 117, 91, 83, 119, 119, 119, 119, 119, 119, 119, 148, 161, 119, 111, 159, 159, 159, 159,
    159, 159, 159, 159, 174, 205, 159, 238, 238, 267, 178, 159, 204, 159, 159, 142, 141, 145, 145, 145, 165, 182, 187,
    193, 200, 194, 222, 207, 193, 192, 225, 204, 204, 195, 228, 209, 212, 231, 199, 256, 252, 254, 304, 277, 290, 275,
    276, 280, 292, 310, 290, 279, 312, 280, 290, 286, 288, 316, 298, 299, 293, 291, 291, 294, 294, 325, 293, 290, 307,
    313, 296, 305, 299
};

static int next[364] = {
    25, 22, 26, 27, 28, 29, 30, 31, 25, 25, 32, 32, 33, 25, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
    32, 32, 32, 32, 32, 32, 32, 32, 34, 25, 23, 23, 5, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 7, 23, 23, 23, 23, 23,
    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 3, 4, 22, 3, 3, 3, 3, 6, 3, 3, 3, 3,
    3, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 21, 8, 8, 8, 8, 8, 9, 8, 8,
    8, 8, 8, 8, 10, 11, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 13, 8, 8, 14, 8, 15, 8, 16, 17, 8, 8, 8, 18, 18, 18, 78, 75, -1,
    -1, 18, 18, 18, 18, 18, 18, 19, 19, 19, -1, 68, 63, 60, 19, 19, 19, 19, 19, 19, 83, 83, 83, 83, 35, 35, 56, 83, 83,
    83, 84, 85, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 39, 37, 37, 52, 48, 36, 49, 38, 50,
    40, 51, 53, 54, 55, 57, 58, 59, 61, 62, 41, 64, 42, 43, 44, 45, 46, 47, -1, -1, -1, -1, -1, -1, -1, -1, 32, 32, 37,
    37, -1, -1, -1, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, -1, -1, 35,
    35, 65, 66, 67, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 69, 70, 71,
    72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 83, 93, 86, 91, 88, 89, 87, 90, 92, 90, 94, 95, 96, 97, 90, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, 83, 83, 83, 83, 83, 83, -1, -1
};

static int check[364] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    7, 7, 20, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 17, 17, 17, 40, 41, 23, 23, 17, 17, 17, 17, 17, 17, 18, 18, 18, 23, 42, 43, 44, 18, 18, 18, 18, 18, 18, 29, 29,
    29, 29, 35, 35, 45, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 37,
    37, 46, 47, 35, 48, 37, 49, 30, 50, 52, 53, 54, 56, 57, 58, 60, 61, 30, 63, 30, 30, 30, 30, 30, 30, 32, 32, 32, 32,
    32, 32, 32, 32, 32, 32, 33, 33, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 32, 32, 34, 34, 64, 65, 66, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 34, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 83, 83, 84, 85, 86, 87, 88, 85, 89, 91, 92, 93, 94,
    95, 96, 97, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 74, 74, 74, 74, 74, 74, 77, 77, 82, 82, 82, 82, 90, 90, 90,
    90, 90, 90, 90, 90, 90
};

static int accept[98] = {
    0, 0, 0, 26, 26, 30, 28, 70, 20, 2, 6, 8, 10, 14, 12, 16, 18, 20, 4, 4, 2, 2, 32, 22, 24, 70, 64, 68, 62, 70, 70,
    66, 60, 70, 70, 0, 54, 0, 52, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 34, 0, 0, 0, 44, 0, 0, 48, 0, 0, 0,
    0, 40, 0, 0, 0, 0, 0, 0, 46, 0, 0, 42, 0, 0, 0, 0, 38, 58, 58, 58, 58, 58, 58, 58, 56, 58, 58, 58, 58, 58, 58, 58
};

static int lls_idx[99] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static int lls_list[1] = { 0 };

int lex(const char* first, const char* last, std::vector<int>& state_stack, unsigned& llen, bool has_more) {
    assert(first <= last && last - first >= llen);
    enum { kTrailContFlag = 1, kFlagCount = 1 };
    int state = state_stack.back();
    const char* p = first + llen;
    while (true) {  // Fill buffers till transition is impossible
        if (p == last) {
            if (!has_more) { break; }
            llen = static_cast<unsigned>(p - first);
            return err_end_of_input;
        }
        int meta = symb2meta[static_cast<unsigned char>(*p)];
        if (meta < 0) { break; }
        do {
            int l = base[state] + meta;
            if (check[l] == state) {
                state = next[l];
                break;
            }
            state = def[state];
        } while (state >= 0);
        if (state < 0) { break; }
        state_stack.push_back(state);
        ++p;
    }
    while (p != first) {  // Unroll downto last accepting state
        int n_pat = accept[state_stack.back()];
        if (n_pat > 0) {
            bool has_trailling_context = n_pat & kTrailContFlag;
            n_pat >>= kFlagCount;
            if (has_trailling_context) {
                do {
                    state = state_stack.back();
                    for (int i = lls_idx[state]; i < lls_idx[state + 1]; ++i) {
                        if (lls_list[i] == n_pat) { goto accept_pat; }
                    }
                    --p;
                    state_stack.pop_back();
                } while (p != first);
            }
        accept_pat:
            llen = static_cast<unsigned>(p - first);
            state_stack.erase(state_stack.end() - llen, state_stack.end());
            return n_pat;
        }
        --p;
        state_stack.pop_back();
    }
    if (p == last) { return err_end_of_input; }
    ++p, llen = 1;  // Accept at least one symbol as default pattern
    return predef_pat_default;
}
